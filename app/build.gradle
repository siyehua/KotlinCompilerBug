plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        //往 BuildConfig 中写入 Log 开关值
        String logCat = getCurrentProperties()
        buildConfigField("boolean", "LOG", "$logCat")


        applicationId "com.siyehua.kotlincomplierbug"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


this.afterEvaluate { Project project ->

    //读取上一次的值
    def (String logCat, File propertyFile) = getLastProperties()
    //读取当前值
    def currentLog = getCurrentProperties()
    System.out.println("upToDateWhen:" + (logCat == currentLog))

    //第一种方案
    //获取编译 kotlin 的任务
//    def buildTask = project.tasks.getByName('compileDebugKotlin') //构建最终执行build task
//    //对比这两个值是否相等, 如果相等, 允许 UP-TO-DATE, 即允许使用缓存, 跳过 kotlin 编译
//    buildTask.outputs.upToDateWhen {
//        logCat == currentLog
//    }

    //第二种方案
    File file = new File(rootDir.getAbsolutePath() + "/app/src/main/java/com/siyehua/kotlincomplierbug", "MainActivity.kt")
    System.out.println("upToDateWhen:" + file.path)

    if (logCat != currentLog && file.exists()) {
        //开关不不一样, 且缓存存在, 则直接将缓存删除
        def list = file.text
        if (!list.endsWith("\n/*gradle change file*/")) {
            file.append("\n/*gradle change file*/")
            System.out.println("upToDateWhen:" + "change targe file1")
        } else {
            list = list.replace("\n/*gradle change file*/", "")
            file.write(list.toString())
            System.out.println("upToDateWhen:" + "change cache file2")
        }

    }

    //写入当前的 logcat 值, 供下一次编译判断
    propertyFile.write("log=$currentLog")
}

/**
 * 获取当前开关
 */
private String getCurrentProperties() {
    Properties property = new Properties()
    File propertyFile = new File(rootDir.getAbsolutePath(), "project.properties")
    property.load(propertyFile.newDataInputStream())
    return property.getProperty("log")
}
/**
 * 获取上一次的开关
 */
private List getLastProperties() {
    File parent = new File(rootDir.getAbsolutePath(), "build")
    if (!parent.exists()) {
        //目录不存在则创建目录
        parent.mkdirs()
    }
    String logCat = ""
    File propertyFile = new File(rootDir.getAbsolutePath(), "build/last.properties")
    if (propertyFile.exists()) {
        Properties property = new Properties()
        property.load(propertyFile.newDataInputStream())
        logCat = property.getProperty("log")
    }
    [logCat, propertyFile]
}